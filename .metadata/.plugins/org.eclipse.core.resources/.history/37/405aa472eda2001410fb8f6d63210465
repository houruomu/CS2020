package sg.edu.nus.cs2020;

//  Import file handling classes
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;

/**
 * class HerbertLog
 * The HerbertLog class records the jobs worked by Herbert, and
 * the wages paid to Herbert, over the last period of employment.
 * The constructor opens the specified log-file, and the get(.) method
 * returns records from the file.
 * 
 */
public class HerbertLog {
		
	/**
	 *  Public static final constants
	 */
	
	// Separator character used in the database file
	public static final String SEP = ":";
	// Length of each record in the database
	public static final int rLength = 18;
	// Padding character for database file
	public static final char PADDING = '.';

	/**
	 * Private state for the HerbertLog
	 */
	// Filename where the database can be found
	private String m_name = null;
	// Variable that points to the database, once opened
	private File m_file = null;
	// Variable for reading from the database file
	private RandomAccessFile m_inRAM = null;
	// Size of the database: number of available records
	private long m_numMinutes = 0;
	
	/**
	 * Debugging information
	 */
	// Number of "get" operations performed on the database
	// Note this is primarily for debugging.
	protected long m_numGets = 0;
	
	/**
	 * Constructor 
	 * @param filename File where the database can be found.
	 * The specified file must exist, and must contain records
	 * in the proper format. 
	 **/
	HerbertLog(String fileName){
		// Save the filename
		m_name = fileName;
		// Next, we open the file
		try {
			// Open the file
			m_file = new File(m_name);
			m_inRAM = new RandomAccessFile(m_file, "r");
			
			// Calculate the number of records in the database by
			// dividing the number of characters by the length of each record
			long numChars = m_inRAM.length();
			m_numMinutes = numChars/rLength;
		} catch (IOException e) {
			System.out.println("Error opening file: " + e);
		}
	}
	
	/**
	 * size
	 * @return the number of records in the database
	 */
	public long numMinutes(){
		return m_numMinutes;
	}

        /**
	 * numGets : primarily for debugging
         * @return number of times get has been called
         */
         public long numGets(){
	         return m_numGets;
         }

	/**
	 * get
	 * @param i specified the record number to retrieve, starting from 0
	 * @return the specified record, if it exists, or null otherwise
	 */
	public Record get(long i){
		System.out.println("getting:" + i);
		// Increment the number of "get" operations
		m_numGets++;
		
		// Check for errors: if i is too large or too small, fail
		if (i > numMinutes()) return null;
		if (i < 0) return null;
		
		// Retrieve the proper record
		try {
			// First, calculate the offset into the file, and seek to that location
			long numChars = i*rLength;			
			m_inRAM.seek(numChars);
			
			// Next, read in rLength bytes
			// Recall that rLength is the length of one record
			byte[] entry = new byte[rLength];
			m_inRAM.read(entry);
			
			// Now, convert the string to a record.
			// Convert it to a string...
			String line = new String(entry);
			// .. parse the string using the record separator
			String[] tokens = line.split(SEP);
			// Every record should have 2 or 3 components
			assert(tokens.length==2 || tokens.length==3);
			// The first token is the name
			String name = tokens[0];
			// The second token is the height
			int height = Integer.parseInt(tokens[1]);
			return new Record(name, height);
			
		} catch (IOException e) {
			System.out.println("Error getting data from file: " + e);
		}
		// If the record wasn't found, for any reason, return null
		return null;
	}
	
	public int calculateSalary(int begin, int end, Record beginRecord, Record oneAfterEnd){
		System.out.println("--total salary from " + begin + " to " + end + " starts--");
	    int mid = 0;
	    boolean isMid = true;
	    int totalSalary = 0;
	    Record endRecord;
	    if(begin != end){
	    	endRecord = get(end);
	    }else{
	    	endRecord = beginRecord;
	    }
	    if(beginRecord.getName().equals(endRecord.getName())){
		    if(end == numMinutes() - 1){
		        totalSalary += endRecord.getWages();
		    }else{
		    	if(!endRecord.getName().equals(oneAfterEnd.getName())){
		    		totalSalary += endRecord.getWages();
		    	}
		    }
		    return totalSalary;
	    }
	    Record midRecord = null;
	    if(end - begin > 1){
	    	mid = (begin + end) / 2;
	        midRecord = get(mid);
	    }else{
	        isMid = false;
	    }
	    

	    // if beginRecord is a last minute, take it down
	    // if begin != end
	        // if endRecord is a last minute, take it down
	    
	    // if mid:
	        // if mid point is a last minute, take it down
	    
	    // search and combine results:
	        // if mid
	            // if mid.name != begin.name && there is something in between mid & begin
	                // take the result of the front half search
	            // if mid.name != end.name && there is something in between mid & end 
	                // take the result of the back half search
	    
	    Record oneAfterBegin = null;
	    if(begin + 1 == mid){
	    	oneAfterBegin = midRecord;
	    }else if(begin + 1 == end){
	    	oneAfterBegin = endRecord;
	    }else if(begin == end){
	    	oneAfterBegin = oneAfterEnd;
	    }else if(beginRecord.getName().equals(midRecord.getName())){
	    	oneAfterBegin = new Record(beginRecord.getName(), 0);
	    }else{
	    	oneAfterBegin = get(begin + 1);
	    }
	    
	    if(!beginRecord.getName().equals(oneAfterBegin.getName())){
	        totalSalary += beginRecord.getWages();
	    }
	    
	    if(end == numMinutes() - 1){
	        totalSalary += endRecord.getWages();
	    }else if(begin != end){
	    	if(!endRecord.getName().equals(oneAfterEnd.getName())){
	    		totalSalary += endRecord.getWages();
	    	}
	    }
	    
	    Record oneAfterMid = null;
	    if(isMid){
	    	if(mid + 1 == end){
	    		oneAfterMid = endRecord;
	    	}else{
		    	oneAfterMid = get(mid + 1);	    		
	    	}

	    	if(!midRecord.getName().equals(oneAfterMid.getName())){
	    		totalSalary += midRecord.getWages();
	    	}
	    }
	    
	    if(isMid){
	        if(!midRecord.getName().equals(beginRecord.getName()) && mid - begin > 1){
	            totalSalary += calculateSalary(begin + 1, mid - 1, oneAfterBegin, midRecord);
	        }
	        if(!midRecord.getName().equals(endRecord.getName()) && end - mid > 1){
	            totalSalary += calculateSalary(mid + 1, end - 1, oneAfterMid, endRecord);
	        }
	    }
	    System.out.println("--total salary from " + begin + " to " + end + " ends--");
	    return totalSalary;
	    
	}
	
	public static void main(String[] args){
		HerbertLog log = new HerbertLog("problem 2/shortNamesHerbert.txt");
        int result = log.calculateSalary(0, (int)log.numMinutes()-1, log.get(0), null);
        System.out.println(result);
        System.out.println(log.numMinutes());
        System.out.println(log.numGets());
	}
}
